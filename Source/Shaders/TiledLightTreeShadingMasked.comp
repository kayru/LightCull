#version 450

#extension GL_ARB_shader_group_vote : enable
#extension GL_ARB_shader_ballot : enable
#extension GL_ARB_gpu_shader_int64 : enable

#define USE_SHALLOW_TREE 1
#define USE_LDS 1

layout(constant_id = 0) const bool g_enableDebugVisualization = false;
layout(constant_id = 1) const uint g_threadGroupSizeX = 8;
layout(constant_id = 2) const uint g_threadGroupSizeY = 8;

#include "TiledLightTreeShadingCommon.glsl"

#if USE_LDS
shared LightTreeNode g_localLightTree[127];
#endif

LightTreeNode getNode(LightTileInfo tileInfo, uint nodeIndex)
{
#if USE_LDS
	return g_localLightTree[nodeIndex];
#else
	return g_lightTreeBuffer[tileInfo.treeOffset + nodeIndex];
#endif
}

shared uint g_mergedTraversalMask[2];

layout(local_size_x_id  = 1, local_size_y_id = 2) in;
void main()
{
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

	uint tileCountX = divUp(g_outputWidth, g_tileSize);
	uint tileCountY = divUp(g_outputHeight, g_tileSize);
	uint tilesPerSlice = tileCountX*tileCountY;

	ivec2 tilePos = pixelPos / ivec2(g_tileSize);
	uint lightGridIndex = SCALARIZE(tilePos.x + tilePos.y*tileCountX);
	LightTileInfo tileInfo = g_lightTileInfo[lightGridIndex];
	uint tileLightOffset = SCALARIZE(tileInfo.lightOffset);
	uint tileLightCount = SCALARIZE(tileInfo.lightCount);
	uint tileTreeOffset = SCALARIZE(tileInfo.treeOffset);
	uint tileTreeNodeCount = SCALARIZE(tileInfo.treeNodeCount);

	uint leafNodeCount = SCALARIZE((tileTreeNodeCount + 1) / 2);
	uint tileLeafLightCount = SCALARIZE(divUp(tileLightCount, leafNodeCount));

	Surface surface = getSurface(pixelPos);

#if USE_LDS
	uint groupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	for (uint i=0; i<divUp(tileInfo.treeNodeCount, groupSize); ++i)
	{
		uint nodeIndex = gl_LocalInvocationIndex + groupSize*i;
		uint readIndex = nodeIndex + tileInfo.treeOffset;
		if (nodeIndex < tileInfo.treeNodeCount)
		{
			g_localLightTree[nodeIndex] = g_lightTreeBuffer[readIndex];
		}
	}
#endif

	if (gl_LocalInvocationIndex < 2)
	{
		g_mergedTraversalMask[gl_LocalInvocationIndex] = 0;
	}

	groupMemoryBarrierWithGroupSync();

	if (pixelPos.x >= g_outputWidth ||
		pixelPos.y >= g_outputHeight)
	{
		return;
	}

	if (!surface.isValid)
	{
		float c = 0.0;
		imageStore(outputImage, pixelPos, vec4(c, c, c, 1.0));
		return;
	}

	uint visitedNodes = 0;
	uint visitedLights = 0;
	uint contributingLights = 0;

	vec3 lighting = vec3(0.0);

	uint64_t localTraversalMask = 0;
	uint nodeIndex = 0;

	const uint topLevelNodeChildCount = 8;
	const uint topLevelNodeCount = leafNodeCount / topLevelNodeChildCount;
	if (topLevelNodeCount == 0) // TODO: don't bother with 2-level traversal when there are exactly 8 leaf level nodes (1 top level node)
	{
		for(uint i=0; i<leafNodeCount; ++i)
		{
			LightTreeNode node = getNode(tileInfo, i);
			visitedNodes++;

			bool nodeHit = abs(node.center - surface.position.z) < node.radius;
			if (nodeHit)
			{
				localTraversalMask |= (uint64_t(1)<<i);
			}
		}
	}
	else
	{
		for(uint j=0; j<topLevelNodeCount; ++j)
		{
			LightTreeNode topLevelNode = getNode(tileInfo, leafNodeCount + j);
			visitedNodes++;

			if (abs(topLevelNode.center - surface.position.z) < topLevelNode.radius)
			{
				for(uint i=j*topLevelNodeChildCount; i<min(leafNodeCount, j*topLevelNodeChildCount+topLevelNodeChildCount); ++i)
				{
					LightTreeNode node = getNode(tileInfo, i);
					visitedNodes++;

					bool nodeHit = abs(node.center - surface.position.z) < node.radius;
					if (nodeHit)
					{
						localTraversalMask |= (uint64_t(1)<<i);
					}
				}
			}
		}
	}

	groupMemoryBarrierWithGroupSync();
	atomicOr(g_mergedTraversalMask[0], uint(localTraversalMask));
	atomicOr(g_mergedTraversalMask[1], uint(localTraversalMask>>32));
	groupMemoryBarrierWithGroupSync();

	for (int wordIndex=0; wordIndex<2; ++wordIndex)
	{
		uint mergedTraversalMask = g_mergedTraversalMask[wordIndex];
		while (mergedTraversalMask != 0)
		{
			int leafNodeIndex = findLSB(mergedTraversalMask) + 32*wordIndex;

			uint lightOffset = tileLightOffset + leafNodeIndex * tileLeafLightCount;
			uint lightBegin = lightOffset;
			uint lightEnd = min(lightOffset + tileLeafLightCount, tileLightOffset + tileLightCount);

			for (uint lightIndex = lightBegin; lightIndex < lightEnd; ++lightIndex)
			{
				LightSource light = getLight(lightIndex);
				accumulateSurfaceLighting(surface, light, lighting);

				if (length(light.position - surface.position) < light.attenuationEnd)
				{
					contributingLights++;
				}
			}

			visitedLights += lightEnd - lightBegin;

			mergedTraversalMask &= ~(1 << leafNodeIndex);
		}
	}

	lighting += evaluateAmbientLighting(surface);

	vec3 res = surface.baseColor * lighting;

	if (g_enableDebugVisualization && g_debugMode!=0)
	{
		imageStore(outputImage, pixelPos, getDebugOutput(visitedNodes, visitedLights, contributingLights));
	}
	else
	{
		imageStore(outputImage, pixelPos, vec4(res, 1.0));
	}
}
